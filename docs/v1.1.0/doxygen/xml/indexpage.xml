<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Intel Homomorphic Encryption Acceleration Library (HEXL)</title>
    <detaileddescription>
<para>Intel:registered: HEXL is an open-source library which provides efficient implementations of integer arithmetic on Galois fields. Such arithmetic is prevalent in cryptography, particularly in homomorphic encryption (HE) schemes. Intel HEXL targets integer arithmetic with word-sized primes, typically 40-60 bits. Intel HEXL provides an API for 64-bit unsigned integers and targets Intel CPUs.</para><para><heading level="2">Contents</heading>
</para><para><itemizedlist>
<listitem><para><ulink url="#intel-homomorphic-encryption-acceleration-library-hexl">Intel Homomorphic Encryption Acceleration Library (HEXL)</ulink><itemizedlist>
<listitem><para><ulink url="#contents">Contents</ulink></para></listitem><listitem><para><ulink url="#introduction">Introduction</ulink></para></listitem><listitem><para><ulink url="#building-intel-hexl">Building Intel HEXL</ulink><itemizedlist>
<listitem><para><ulink url="#dependencies">Dependencies</ulink></para></listitem><listitem><para><ulink url="#compile-time-options">Compile-time options</ulink></para></listitem><listitem><para><ulink url="#compiling-intel-hexl">Compiling Intel HEXL</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#testing-intel-hexl">Testing Intel HEXL</ulink></para></listitem><listitem><para><ulink url="#benchmarking-intel-hexl">Benchmarking Intel HEXL</ulink></para></listitem><listitem><para><ulink url="#using-intel-hexl">Using Intel HEXL</ulink></para></listitem><listitem><para><ulink url="#debugging">Debugging</ulink></para></listitem><listitem><para><ulink url="#threading">Threading</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#community-adoption">Community Adoption</ulink></para></listitem><listitem><para><ulink url="#documentation">Documentation</ulink><itemizedlist>
<listitem><para><ulink url="#doxygen">Doxygen</ulink></para></listitem><listitem><para><ulink url="#sphinx">Sphinx</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#contributing">Contributing</ulink><itemizedlist>
<listitem><para><ulink url="#repository-layout">Repository layout</ulink></para></listitem><listitem><para><ulink url="#intel-hexl-publication">Intel HEXL Publication</ulink></para></listitem><listitem><para><ulink url="#citing-intel-hexl">Citing Intel HEXL</ulink><itemizedlist>
<listitem><para><ulink url="#version-10">Version 1.0</ulink></para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para><heading level="2">Introduction</heading>
</para><para>Many cryptographic applications, particularly homomorphic encryption (HE), rely on integer polynomial arithmetic in a finite field. HE, which enables computation on encrypted data, typically uses polynomials with degree <computeroutput>N</computeroutput> a power of two roughly in the range <computeroutput>N=[2^{10}, 2^{17}]</computeroutput>. The coefficients of these polynomials are in a finite field with a word-sized prime, <computeroutput>q</computeroutput>, up to <computeroutput>q</computeroutput>~62 bits. More precisely, the polynomials live in the ring <computeroutput>Z_q[X]/(X^N + 1)</computeroutput>. That is, when adding or multiplying two polynomials, each coefficient of the result is reduced by the prime modulus <computeroutput>q</computeroutput>. When multiplying two polynomials, the resulting polynomials of degree <computeroutput>2N</computeroutput> is additionally reduced by taking the remainder when dividing by <computeroutput>X^N+1</computeroutput>.</para><para>The primary bottleneck in many HE applications is polynomial-polynomial multiplication in <computeroutput>Z_q[X]/(X^N + 1)</computeroutput>. For efficient implementation, Intel HEXL implements the negacyclic number-theoretic transform (NTT). To multiply two polynomials, <computeroutput>q_1(x), q_2(x)</computeroutput> using the NTT, we perform the FwdNTT on the two input polynomials, then perform an element-wise modular multiplication, and perform the InvNTT on the result.</para><para>Intel HEXL implements the following functions:<itemizedlist>
<listitem><para>The forward and inverse negacyclic number-theoretic transform (NTT)</para></listitem><listitem><para>Element-wise vector-vector modular multiplication</para></listitem><listitem><para>Element-wise vector-scalar modular multiplication with optional addition</para></listitem><listitem><para>Element-wise modular multiplication</para></listitem></itemizedlist>
</para><para>For each function, the library implements one or several Intel(R) AVX-512 implementations, as well as a less performant, more readable native C++ implementation. Intel HEXL will automatically choose the best implementation for the given CPU Intel(R) AVX-512 feature set. In particular, when the modulus <computeroutput>q</computeroutput> is less than <computeroutput>2^{50}</computeroutput>, the AVX512IFMA instruction set available on Intel IceLake server and IceLake client will provide a more efficient implementation.</para><para>For additional functionality, see the public headers, located in <computeroutput>include/hexl</computeroutput></para><para><heading level="2">Building Intel HEXL</heading>
</para><para><heading level="3">Dependencies</heading>
</para><para>We have tested Intel HEXL on the following operating systems:<itemizedlist>
<listitem><para>Ubuntu 18.04</para></listitem><listitem><para>macOS 10.15</para></listitem><listitem><para>Microsoft Windows 10</para></listitem></itemizedlist>
</para><para>Intel HEXL requires the following dependencies:</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Dependency </para></entry><entry thead="yes"><para>Version  </para></entry></row>
<row>
<entry thead="no"><para>CMake </para></entry><entry thead="no"><para>&gt;= 3.5.1 </para></entry></row>
<row>
<entry thead="no"><para>Compiler </para></entry><entry thead="no"><para>gcc &gt;= 7.0, clang++ &gt;= 5.0, MSVC &gt;= 2019 </para></entry></row>
</table>
For best performance, we recommend using a processor with AVX512-IFMA52 support, and a recent compiler (gcc &gt;= 8.0, clang++ &gt;= 6.0). To determine if your process supports AVX512-IFMA52, simply look for <computeroutput>HEXL_HAS_AVX512IFMA</computeroutput> during the configure step (see <ulink url="#compiling-hexl">Compiling Intel HEXL</ulink>).</para><para><heading level="3">Compile-time options</heading>
</para><para>In addition to the standard CMake build options, Intel HEXL supports several compile-time flags to configure the build. For convenience, they are listed below:</para><para><table rows="12" cols="3"><row>
<entry thead="yes"><para>CMake option </para></entry><entry thead="yes"><para>Values </para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>HEXL_BENCHMARK </para></entry><entry thead="no"><para>ON / OFF (default ON) </para></entry><entry thead="no"><para>Set to ON to enable benchmark suite via Google benchmark </para></entry></row>
<row>
<entry thead="no"><para>HEXL_COVERAGE </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable coverage report of unit-tests </para></entry></row>
<row>
<entry thead="no"><para>HEXL_DEBUG </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable debugging at large runtime penalty </para></entry></row>
<row>
<entry thead="no"><para>HEXL_DOCS </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable building of documentation </para></entry></row>
<row>
<entry thead="no"><para>HEXL_ENABLE_ADDRESS_SANITIZER </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable building with address sanitizer (ASan) </para></entry></row>
<row>
<entry thead="no"><para>HEXL_ENABLE_THREAD_SANITIZER </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable building with thread sanitizer (TSan) </para></entry></row>
<row>
<entry thead="no"><para>HEXL_ENABLE_UB_SANITIZER </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable building with undefined behavior sanitizer (UBSan) </para></entry></row>
<row>
<entry thead="no"><para>HEXL_EXPORT </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable export of Intel HEXL for use in 3rd-party project </para></entry></row>
<row>
<entry thead="no"><para>HEXL_SHARED_LIB </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to enable building shared library </para></entry></row>
<row>
<entry thead="no"><para>HEXL_TESTING </para></entry><entry thead="no"><para>ON / OFF (default ON) </para></entry><entry thead="no"><para>Set to ON to enable building of unit-tests </para></entry></row>
<row>
<entry thead="no"><para>HEXL_TREAT_WARNING_AS_ERROR </para></entry><entry thead="no"><para>ON / OFF (default OFF) </para></entry><entry thead="no"><para>Set to ON to treat all warnings as error </para></entry></row>
</table>
<heading level="3">Compiling Intel HEXL</heading>
</para><para>The instructions to build Intel HEXL are common between Linux, MacOS, and Windows.</para><para>To compile Intel HEXL from source code, first clone the repository into your current directory. Then, to configure the build, call <programlisting><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build</highlight></codeline>
</programlisting> adding the desired compile-time options with a <computeroutput>-D</computeroutput> flag. For instance, to build Intel HEXL with debugging capabilities, call <programlisting><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build<sp/>-DHEXL_DEBUG=ON</highlight></codeline>
</programlisting></para><para>Then, to build Intel HEXL, call <programlisting><codeline><highlight class="normal">cmake<sp/>--build<sp/>build</highlight></codeline>
</programlisting> This will build the Intel HEXL library in the <computeroutput>build/hexl/lib/</computeroutput> directory.</para><para>To install Intel HEXL to the installation directory, run <programlisting><codeline><highlight class="normal">cmake<sp/>--install<sp/>build</highlight></codeline>
</programlisting> To use a non-standard installation directory, configure the build with <programlisting><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build<sp/>-DCMAKE_INSTALL_PREFIX=/path/to/install</highlight></codeline>
</programlisting></para><para><heading level="2">Testing Intel HEXL</heading>
</para><para>To run a set of unit tests via Googletest, configure and build Intel HEXL with <computeroutput>-DHEXL_TESTING=ON</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). Then, run <programlisting><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>unittest</highlight></codeline>
</programlisting> The unit-test executable itself is located at <computeroutput>build/test/unit-test</computeroutput> <heading level="2">Benchmarking Intel HEXL</heading>
</para><para>To run a set of benchmarks via Google benchmark, configure and build Intel HEXL with <computeroutput>-DHEXL_BENCHMARK=ON</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). Then, run <programlisting><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>bench</highlight></codeline>
</programlisting> The benchmark executable itself is located at <computeroutput>build/benchmark/bench_hexl</computeroutput></para><para><heading level="2">Using Intel HEXL</heading>
</para><para>The <computeroutput>example</computeroutput> folder has an example of using Intel HEXL in a third-party project.</para><para><heading level="2">Debugging</heading>
</para><para>For optimal performance, Intel HEXL does not perform input validation. In many cases the time required for the validation would be longer than the execution of the function itself. To debug Intel HEXL, configure and build Intel HEXL with <computeroutput>-DHEXL_DEBUG=ON</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). This will generate a debug version of the library, e.g. <computeroutput>libhexl_debug.a</computeroutput>, that can be used to debug the execution.</para><para><bold>Note</bold>, enabling <computeroutput>HEXL_DEBUG=ON</computeroutput> will result in a significant runtime overhead. <heading level="2">Threading</heading>
</para><para>Intel HEXL is single-threaded and thread-safe.</para><para><heading level="1">Community Adoption</heading>
</para><para>Intel HEXL has been integrated to <ulink url="https://github.com/Microsoft/SEAL">Microsoft SEAL</ulink>, an easy-to-use homomorphic encryption library.</para><para>If you are aware of any other uses of Intel HEXL, please let us know!</para><para><heading level="1">Documentation</heading>
</para><para>See <ulink url="https://intel.github.io/hexl">https://intel.github.io/hexl</ulink> for Doxygen documentation.</para><para>Intel HEXL supports documentation via Doxygen and sphinx. To build documentation, first install <computeroutput>doxygen</computeroutput> and <computeroutput>graphviz</computeroutput>, e.g. <programlisting><codeline><highlight class="normal">sudo<sp/>apt-get<sp/>install<sp/>doxygen<sp/>graphviz</highlight></codeline>
</programlisting> Then, configure Intel HEXL with <computeroutput>-DHEXL_DOCS=ON</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). <heading level="2">Doxygen</heading>
</para><para>To build Doxygen documentation, after configuring Intel HEXL with <computeroutput>-DHEXL_DOCS=ON</computeroutput>, run <programlisting><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>doxygen</highlight></codeline>
</programlisting> To view the generated Doxygen documentation, open the generated <computeroutput>build/docs/doxygen/html/index.html</computeroutput> file in a web browser.</para><para><heading level="2">Sphinx</heading>
</para><para>To build the sphinx documentation, install <computeroutput>sphinx</computeroutput> and required dependencies <computeroutput>breathe, m2r2</computeroutput>, e.g. <programlisting><codeline><highlight class="normal">sudo<sp/>apt-get<sp/>install<sp/>python3-sphinx</highlight></codeline>
<codeline><highlight class="normal">pip3<sp/>install<sp/>breathe<sp/>m2r2</highlight></codeline>
</programlisting></para><para>Then, after configuring Intel HEXL with <computeroutput>-DHEXL_DOCS=ON</computeroutput>, run <programlisting><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>docs</highlight></codeline>
</programlisting> To view the generated Sphinx documentation, open the generated <computeroutput>build/docs/sphinx/html/index.html</computeroutput> file in a web browser.</para><para><heading level="1">Contributing</heading>
</para><para>At this time, Intel HEXL does not accept external contributions. We encourage feedback and suggestions via issues.</para><para>For Intel developers, use <ulink url="https://pre-commit.com/">pre-commit</ulink> to validate the formatting of the code.</para><para>Before contributing, please run <programlisting><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>check<sp/>unittest</highlight></codeline>
</programlisting> and make sure pre-commit checks and all unit tests pass.</para><para><heading level="2">Repository layout</heading>
</para><para>Public headers reside in the <computeroutput>hexl/include</computeroutput> folder. Private headers, e.g. those containing Intel(R) AVX-512 code should not be put in this folder.</para><para><heading level="2">Intel HEXL Publication</heading>
</para><para>For more details on Intel HEXL, see our whitepaper at <ulink url="https://arxiv.org/abs/2103.16400">https://arxiv.org/abs/2103.16400</ulink>.</para><para><heading level="2">Citing Intel HEXL</heading>
</para><para>To cite Intel HEXL, please use the following BibTeX entry.</para><para><heading level="3">Version 1.0</heading>
</para><para><programlisting><codeline><highlight class="normal">@misc{IntelHEXL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/>{{I}ntel<sp/>{HEXL}<sp/>(release<sp/>1.0)},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>howpublished<sp/>=<sp/>{\url{https://arxiv.org/abs/2103.16400}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>month<sp/>=<sp/>mar,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>year<sp/>=<sp/>2021,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>{Intel<sp/>HEXL}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
