<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classintel_1_1hexl_1_1_n_t_t" kind="class" language="C++" prot="public">
    <compoundname>intel::hexl::NTT</compoundname>
    <includes refid="ntt_8hpp" local="no">ntt.hpp</includes>
    <innerclass refid="structintel_1_1hexl_1_1_n_t_t_1_1allocator__adapter" prot="public">intel::hexl::NTT::allocator_adapter</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classintel_1_1hexl_1_1_n_t_t_1a2ddf6cf8973978de8d8a90998e5735c2" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; NTTImpl &gt;</type>
        <definition>std::shared_ptr&lt;NTTImpl&gt; intel::hexl::NTT::m_impl</definition>
        <argsstring></argsstring>
        <name>m_impl</name>
        <briefdescription>
<para>Class implementing the <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="107" column="19" bodyfile="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1ade0447617b50232d2a076f99e672d15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>()</argsstring>
        <name>NTT</name>
        <briefdescription>
<para>Initializes an empty <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="38" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1ab6fca1753db0834c692232e8897c725f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::~NTT</definition>
        <argsstring>()</argsstring>
        <name>~NTT</name>
        <briefdescription>
<para>Destructs the <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="41" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1a6989d7d77ade294c556525e80d0909de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t p, std::shared_ptr&lt; allocator_base &gt; alloc_ptr={})</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structintel_1_1hexl_1_1allocator__base" kindref="compound">allocator_base</ref> &gt;</type>
          <declname>alloc_ptr</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Performs pre-computation necessary for forward and inverse transforms. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes an <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> object with degree <computeroutput>degree</computeroutput> and modulus <computeroutput>p</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>a.k.a. N. Size of the <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> transform. Must be a power of 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Prime modulus. Must satisfy <formula id="9">$ p == 1 \mod 2N $</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alloc_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom memory allocator used for intermediate calculations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="51" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1aba658b9cbb91754a6a1a111fa39b3b56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class...</type>
            <declname>AllocatorArgs</declname>
            <defname>AllocatorArgs</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t p, Allocator &amp;&amp;a, AllocatorArgs &amp;&amp;... args)</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Allocator &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>AllocatorArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="55" column="3" bodyfile="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1a8577aba58e23fdd6b6865d019a9df3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t p, uint64_t root_of_unity, std::shared_ptr&lt; allocator_base &gt; alloc_ptr={})</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>root_of_unity</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structintel_1_1hexl_1_1allocator__base" kindref="compound">allocator_base</ref> &gt;</type>
          <declname>alloc_ptr</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Initializes an <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> object with degree <computeroutput>degree</computeroutput> and modulus <computeroutput>p</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>a.k.a. N. Size of the <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> transform. Must be a power of 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Prime modulus. Must satisfy <formula id="9">$ p == 1 \mod 2N $</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root_of_unity</parametername>
</parameternamelist>
<parameterdescription>
<para>2N&apos;th root of unity in <formula id="10">$ \mathbb{Z_p} $</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alloc_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom memory allocator used for intermediate calculations</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Performs pre-computation necessary for forward and inverse transforms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="72" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1a4c529039fcafa8949a218e0e14bdede6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class...</type>
            <declname>AllocatorArgs</declname>
            <defname>AllocatorArgs</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t p, uint64_t root_of_unity, Allocator &amp;&amp;a, AllocatorArgs &amp;&amp;... args)</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>root_of_unity</declname>
        </param>
        <param>
          <type>Allocator &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>AllocatorArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="76" column="3" bodyfile="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="76" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1a7f8dac5ff3fc117d3e7259762a716140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::NTT::ComputeForward</definition>
        <argsstring>(uint64_t *result, const uint64_t *operand, uint64_t input_mod_factor, uint64_t output_mod_factor)</argsstring>
        <name>ComputeForward</name>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>input_mod_factor</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>output_mod_factor</declname>
        </param>
        <briefdescription>
<para>Compute forward <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref>. Results are bit-reversed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>Data on which to compute the <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Assume input <computeroutput>operand</computeroutput> are in [0, input_mod_factor * p). Must be 1, 2 or 4. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns output <computeroutput>operand</computeroutput> in [0, output_mod_factor * p). Must be 1 or 4. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="91" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1_n_t_t_1a31e78375dcafd5df85cb1259a9156a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::NTT::ComputeInverse</definition>
        <argsstring>(uint64_t *result, const uint64_t *operand, uint64_t input_mod_factor, uint64_t output_mod_factor)</argsstring>
        <name>ComputeInverse</name>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>input_mod_factor</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>output_mod_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute inverse <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref>. Results are bit-reversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>Data on which to compute the <ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Assume input <computeroutput>operand</computeroutput> are in [0, input_mod_factor * p). Must be 1 or 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns output <computeroutput>operand</computeroutput> in [0, output_mod_factor * p). Must be 1 or 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="101" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Performs negacyclic forward and inverse number-theoretic transform (<ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref>), commonly used in RLWE cryptography. </para>
    </briefdescription>
    <detaileddescription>
<para>The number-theoretic transform (<ref refid="classintel_1_1hexl_1_1_n_t_t" kindref="compound">NTT</ref>) specializes the discrete Fourier transform (DFT) to the finite field <formula id="8">$ \mathbb{Z}_p / (X^N + 1) $</formula>. </para>
    </detaileddescription>
    <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="21" column="10" bodyfile="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="21" bodyend="108"/>
    <listofallmembers>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1a7f8dac5ff3fc117d3e7259762a716140" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>ComputeForward</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1a31e78375dcafd5df85cb1259a9156a9a" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>ComputeInverse</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1a2ddf6cf8973978de8d8a90998e5735c2" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_impl</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1ade0447617b50232d2a076f99e672d15c" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1a6989d7d77ade294c556525e80d0909de" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1aba658b9cbb91754a6a1a111fa39b3b56" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1a8577aba58e23fdd6b6865d019a9df3ee" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1a4c529039fcafa8949a218e0e14bdede6" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1_n_t_t_1ab6fca1753db0834c692232e8897c725f" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>~NTT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
